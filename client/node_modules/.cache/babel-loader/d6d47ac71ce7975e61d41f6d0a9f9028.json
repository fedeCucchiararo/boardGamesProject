{"ast":null,"code":"import _regeneratorRuntime from \"/Users/fedegomez/bootcamp/collab/skylab-bootcamp-201809/staff/fede-gomez/project/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/fedegomez/bootcamp/collab/skylab-bootcamp-201809/staff/fede-gomez/project/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/fedegomez/bootcamp/collab/skylab-bootcamp-201809/staff/fede-gomez/project/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/fedegomez/bootcamp/collab/skylab-bootcamp-201809/staff/fede-gomez/project/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/fedegomez/bootcamp/collab/skylab-bootcamp-201809/staff/fede-gomez/project/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/fedegomez/bootcamp/collab/skylab-bootcamp-201809/staff/fede-gomez/project/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/fedegomez/bootcamp/collab/skylab-bootcamp-201809/staff/fede-gomez/project/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/fedegomez/bootcamp/collab/skylab-bootcamp-201809/staff/fede-gomez/project/client/src/components/PlaySaveModal/PlaySaveModal.js\";\nimport React, { Component } from 'react';\nimport './PlaySaveModal.css';\nimport SelectPlayer from '../SelectPlayer/SelectPlayer';\nimport logic from '../../logic';\nimport { BrowserRouter as Router, Route, Link, Redirect, withRouter } from \"react-router-dom\";\n\nvar PlaySaveModal =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(PlaySaveModal, _Component);\n\n  // https://boardgamegeek.com/boardgame/31260/agricola\n  function PlaySaveModal(props) {\n    var _this;\n\n    _classCallCheck(this, PlaySaveModal);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PlaySaveModal).call(this, props));\n\n    _this.playerSelectHandler = function (event) {\n      var index = event.target.id;\n      var userId = event.target.value;\n      var players = _this.state.players;\n      players[index] = userId;\n\n      _this.setState(function () {\n        return {\n          players: players\n        };\n      });\n    };\n\n    _this.playerCountChangeHandler =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(event) {\n        var playerCount, players, diff, i;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                playerCount = parseInt(event.target.value);\n                players = _this.state.players;\n\n                if (playerCount > players.length) {\n                  diff = playerCount - players.length;\n\n                  for (i = 1; i <= diff; i++) {\n                    players.push(1);\n                  }\n                } else if (players.length > playerCount) {\n                  players.splice(players.length - (players.length - playerCount));\n                }\n\n                players[0] = logic._userId;\n\n                _this.setState({\n                  players: players\n                });\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    _this.handleNotesChange = function (event) {\n      var notes = event.target.value;\n\n      _this.setState({\n        notes: notes\n      });\n    };\n\n    _this.handleDateChange = function (event) {\n      var date = event.target.value;\n\n      _this.setState({\n        date: date\n      });\n    };\n\n    _this.handlePlayersChange = function (event) {\n      var players = event.target.value;\n\n      _this.setState({\n        players: players\n      });\n    };\n\n    _this.checkDuplicity = function (array) {\n      var counts = [];\n\n      for (var i = 0; i <= array.length; i++) {\n        if (counts[array[i]] === undefined) {\n          counts[array[i]] = 1;\n        } else {\n          return true;\n        }\n      }\n\n      return false;\n    };\n\n    _this.equalsOne = function (elem) {\n      return elem === 1;\n    };\n\n    _this.onCloseHandler = function () {\n      _this.setState({\n        notes: '',\n        date: null,\n        gameId: '',\n        players: [],\n        users: [],\n        playerCount: 0\n      });\n\n      _this.props.onClose();\n    };\n\n    _this.handleSubmit = function (event) {\n      event.preventDefault();\n      var _this$state = _this.state,\n          notes = _this$state.notes,\n          date = _this$state.date,\n          players = _this$state.players,\n          gameId = _this$state.gameId;\n\n      if (!date) {\n        _this.props.onError('Please insert a valid date');\n      } else if (notes.length === 0) {\n        _this.props.onError('Please insert some notes');\n      } else if (!players.length || players.some(_this.equalsOne)) {\n        _this.props.onError('Please choose valid players');\n      } else if (_this.checkDuplicity(players)) {\n        _this.props.onError('You cannot choose the same player more than once');\n      } else {\n        _this.props.onPlaySave(notes, date, players, gameId); // this.props.onError('Play succesfully registered')\n\n\n        _this.props.onClose();\n\n        _this.setState(function () {\n          return {\n            notes: '',\n            date: null,\n            users: [],\n            gameId: '',\n            players: [],\n            playerCount: 0\n          };\n        });\n      }\n    };\n\n    _this.state = {\n      notes: '',\n      date: null,\n      users: [],\n      gameId: '',\n      players: [],\n      playerCount: 0\n    };\n    return _this;\n  } // componentWillMount() {\n  //     logic.getAllUsers()\n  //         .then(users => {\n  //             this.setState(() => {\n  //                 return (\n  //                     {\n  //                         users: users\n  //                     }\n  //                 )\n  //             })\n  //         })\n  // }\n\n\n  _createClass(PlaySaveModal, [{\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(props) {\n      var _this2 = this;\n\n      console.log('componentWillReceiveProps', props);\n      logic.getAllUsers().then(function (users) {\n        _this2.setState(function () {\n          return {\n            users: users\n          };\n        });\n      });\n      this.setState({\n        gameId: props.game.id\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.props.show) {\n        var maxPlayerCount = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n        return React.createElement(\"div\", {\n          className: \"playSaveModal-container\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 171\n          },\n          __self: this\n        }, React.createElement(\"section\", {\n          className: \"playSaveModal-head\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 172\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"playSaveModal-head__image-container\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 173\n          },\n          __self: this\n        }, React.createElement(\"img\", {\n          className: \"playSaveModal-head__image\",\n          src: this.props.game.image,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 174\n          },\n          __self: this\n        })), React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 176\n          },\n          __self: this\n        }, React.createElement(\"h1\", {\n          className: \"playSaveModal-head__title\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 177\n          },\n          __self: this\n        }, this.props.game.name, \" / ID: \", this.state.gameId)), React.createElement(\"button\", {\n          className: \"playSaveModal-close\",\n          onClick: this.onCloseHandler,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 179\n          },\n          __self: this\n        }, \"X\"), React.createElement(\"form\", {\n          id: \"form\",\n          onSubmit: this.handleSubmit,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 180\n          },\n          __self: this\n        }, React.createElement(\"input\", {\n          type: \"date\",\n          placeholder: \"Date\",\n          onChange: this.handleDateChange,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 182\n          },\n          __self: this\n        }), React.createElement(\"input\", {\n          type: \"text\",\n          placeholder: \"Notes\",\n          onChange: this.handleNotesChange,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 183\n          },\n          __self: this\n        }), React.createElement(\"input\", {\n          type: \"file\",\n          placeholder: \"Notes\",\n          onChange: this.handleNotesChange,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 184\n          },\n          __self: this\n        }), React.createElement(\"select\", {\n          onChange: this.playerCountChangeHandler,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 186\n          },\n          __self: this\n        }, React.createElement(\"option\", {\n          default: true,\n          value: 0,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 187\n          },\n          __self: this\n        }, \"Number of players\"), maxPlayerCount.map(function (value, index) {\n          return React.createElement(\"option\", {\n            value: value,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 188\n            },\n            __self: this\n          }, value);\n        })), React.createElement(SelectPlayer, {\n          players: this.state.players,\n          playerCount: this.state.playerCount,\n          users: this.state.users,\n          onChange: this.playerSelectHandler,\n          thisPlayer: logic._userId,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 191\n          },\n          __self: this\n        }), React.createElement(\"button\", {\n          type: \"submit\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 207\n          },\n          __self: this\n        }, \"Save Play\"))));\n      } else {\n        return null;\n      }\n    }\n  }]);\n\n  return PlaySaveModal;\n}(Component);\n\nexport default withRouter(PlaySaveModal);","map":{"version":3,"sources":["/Users/fedegomez/bootcamp/collab/skylab-bootcamp-201809/staff/fede-gomez/project/client/src/components/PlaySaveModal/PlaySaveModal.js"],"names":["React","Component","SelectPlayer","logic","BrowserRouter","Router","Route","Link","Redirect","withRouter","PlaySaveModal","props","playerSelectHandler","event","index","target","id","userId","value","players","state","setState","playerCountChangeHandler","playerCount","parseInt","length","diff","i","push","splice","_userId","handleNotesChange","notes","handleDateChange","date","handlePlayersChange","checkDuplicity","array","counts","undefined","equalsOne","elem","onCloseHandler","gameId","users","onClose","handleSubmit","preventDefault","onError","some","onPlaySave","console","log","getAllUsers","then","game","show","maxPlayerCount","image","name","map"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport './PlaySaveModal.css'\nimport SelectPlayer from '../SelectPlayer/SelectPlayer'\nimport logic from '../../logic'\nimport { BrowserRouter as Router, Route, Link, Redirect, withRouter } from \"react-router-dom\"\n\nclass PlaySaveModal extends Component {\n    // https://boardgamegeek.com/boardgame/31260/agricola\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            notes: '',\n            date: null,\n            users: [],\n            gameId: '',\n            players: [],\n            playerCount: 0\n        }\n    }\n\n    // componentWillMount() {\n    //     logic.getAllUsers()\n    //         .then(users => {\n    //             this.setState(() => {\n    //                 return (\n    //                     {\n    //                         users: users\n    //                     }\n    //                 )\n    //             })\n    //         })\n    // }\n\n    playerSelectHandler = (event) => {\n\n\n        let index = event.target.id\n        let userId = event.target.value\n\n        let players = this.state.players\n        players[index] = userId\n\n        this.setState(() => {\n            return ({\n                players: players\n            })\n        })\n    }\n\n    playerCountChangeHandler = async (event) => {\n\n\n        let playerCount = parseInt(event.target.value)\n        let players = this.state.players\n\n        if (playerCount > players.length) {\n            let diff = playerCount - players.length\n            for (let i = 1; i <= diff; i++) {\n                players.push(1)\n            }\n        } else if (players.length > playerCount) {\n\n            players.splice(players.length - (players.length - playerCount))\n        }\n\n        players[0] = logic._userId\n\n        this.setState({\n            players: players\n        })\n    }\n\n    componentWillReceiveProps(props) {\n        console.log('componentWillReceiveProps', props)\n        logic.getAllUsers()\n            .then(users => {\n                this.setState(() => {\n                    return (\n                        {\n                            users: users\n                        }\n                    )\n                })\n            })\n        this.setState({ gameId: props.game.id })\n    }\n\n    handleNotesChange = event => {\n        const notes = event.target.value\n\n        this.setState({ notes })\n    }\n\n    handleDateChange = event => {\n        const date = event.target.value\n\n        this.setState({ date })\n    }\n\n    handlePlayersChange = event => {\n        const players = event.target.value\n\n        this.setState({ players })\n    }\n\n    checkDuplicity = array => {\n        let counts = [];\n        for (var i = 0; i <= array.length; i++) {\n            if (counts[array[i]] === undefined) {\n                counts[array[i]] = 1\n            } else {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    equalsOne = (elem) => {\n        return elem === 1\n    }\n\n    onCloseHandler = () => {\n        this.setState(({\n            notes: '',\n            date: null,\n            gameId: '',\n            players: [],\n            users: [],\n            playerCount: 0\n        }))\n        this.props.onClose()\n    }\n\n    handleSubmit = event => {\n        event.preventDefault()\n\n        const { notes, date, players, gameId } = this.state\n\n        if (!date) {\n            this.props.onError('Please insert a valid date')\n        } else if (notes.length === 0) {\n            this.props.onError('Please insert some notes')\n        } else if (!players.length || players.some(this.equalsOne)) {\n            this.props.onError('Please choose valid players')\n        } else if (this.checkDuplicity(players)) {\n            this.props.onError('You cannot choose the same player more than once')\n        } else {\n            this.props.onPlaySave(notes, date, players, gameId)\n            // this.props.onError('Play succesfully registered')\n            this.props.onClose()\n            this.setState(() => {\n                return ({\n                    notes: '',\n                    date: null,\n                    users: [],\n                    gameId: '',\n                    players: [],\n                    playerCount: 0\n                })\n            })\n        }\n    }\n\n    render() {\n        if (this.props.show) {\n\n            const maxPlayerCount = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n            return (\n                <div className='playSaveModal-container'>\n                    <section className=\"playSaveModal-head\">\n                        <div className=\"playSaveModal-head__image-container\">\n                            <img className=\"playSaveModal-head__image\" src={this.props.game.image}></img>\n                        </div>\n                        <div>\n                            <h1 className='playSaveModal-head__title'>{this.props.game.name} / ID: {this.state.gameId}</h1>\n                        </div>\n                        <button className=\"playSaveModal-close\" onClick={this.onCloseHandler}>X</button>\n                        <form id='form' onSubmit={this.handleSubmit}>\n                            {/* <input type=\"text\" placeholder=\"Name\" onChange={this.handleNameChange} /> */}\n                            <input type=\"date\" placeholder=\"Date\" onChange={this.handleDateChange} />\n                            <input type=\"text\" placeholder=\"Notes\" onChange={this.handleNotesChange} />\n                            <input type=\"file\" placeholder=\"Notes\" onChange={this.handleNotesChange} />\n\n                            <select onChange={this.playerCountChangeHandler}>\n                                <option default={true} value={0}>Number of players</option>\n                                {maxPlayerCount.map((value, index) => <option value={value}>{value}</option>)}\n                            </select>\n\n                            <SelectPlayer\n                                players={this.state.players}\n                                playerCount={this.state.playerCount}\n                                users={this.state.users}\n                                onChange={this.playerSelectHandler}\n                                thisPlayer={logic._userId}\n                            />\n\n                            {/* {this.state.players.map((elem, index) =>\n                                <select id={index} onChange={this.playerSelectHandler}>\n                                    <option default='true' value={0}>Choose a Player</option>\n                                    {this.state.users.map(user => <option value={user.id}>{user.username}</option>)}\n                                </select>\n                            )} */}\n\n\n                            <button type=\"submit\">Save Play</button>\n                        </form>\n                    </section>\n                </div>\n            )\n        } else {\n            return null\n        }\n    }\n}\n\nexport default withRouter(PlaySaveModal)"]},"metadata":{},"sourceType":"module"}