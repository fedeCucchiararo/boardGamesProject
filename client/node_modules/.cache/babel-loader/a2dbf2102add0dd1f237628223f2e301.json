{"ast":null,"code":"import _regeneratorRuntime from \"/Users/fedegomez/bootcamp/collab/skylab-bootcamp-201809/staff/fede-gomez/project/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/fedegomez/bootcamp/collab/skylab-bootcamp-201809/staff/fede-gomez/project/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nvar logic = {\n  _userId: sessionStorage.getItem('userId') || null,\n  _token: sessionStorage.getItem('token') || null,\n  url: 'NO-URL',\n  registerUser: function () {\n    var _registerUser = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(name, surname, username, password, email) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(typeof name !== 'string')) {\n                _context.next = 2;\n                break;\n              }\n\n              throw TypeError(\"\".concat(name, \" is not a string\"));\n\n            case 2:\n              if (!(typeof surname !== 'string')) {\n                _context.next = 4;\n                break;\n              }\n\n              throw TypeError(\"\".concat(surname, \" is not a string\"));\n\n            case 4:\n              if (!(typeof username !== 'string')) {\n                _context.next = 6;\n                break;\n              }\n\n              throw TypeError(\"\".concat(username, \" is not a string\"));\n\n            case 6:\n              if (!(typeof password !== 'string')) {\n                _context.next = 8;\n                break;\n              }\n\n              throw TypeError(\"\".concat(password, \" is not a string\"));\n\n            case 8:\n              if (!(typeof email !== 'string')) {\n                _context.next = 10;\n                break;\n              }\n\n              throw TypeError(\"\".concat(email, \" is not a string\"));\n\n            case 10:\n              if (name.trim()) {\n                _context.next = 12;\n                break;\n              }\n\n              throw Error('name is empty or blank');\n\n            case 12:\n              if (surname.trim()) {\n                _context.next = 14;\n                break;\n              }\n\n              throw Error('surname is empty or blank');\n\n            case 14:\n              if (username.trim()) {\n                _context.next = 16;\n                break;\n              }\n\n              throw Error('username is empty or blank');\n\n            case 16:\n              if (password.trim()) {\n                _context.next = 18;\n                break;\n              }\n\n              throw Error('password is empty or blank');\n\n            case 18:\n              if (email.trim()) {\n                _context.next = 20;\n                break;\n              }\n\n              throw Error('email is empty or blank');\n\n            case 20:\n              return _context.abrupt(\"return\", fetch(\"\".concat(this.url, \"/users\"), {\n                method: 'POST',\n                headers: {\n                  'Content-Type': 'application/json; charset=utf-8'\n                },\n                body: JSON.stringify({\n                  name: name,\n                  surname: surname,\n                  username: username,\n                  password: password,\n                  email: email\n                })\n              }).then(function (res) {\n                return res.json();\n              }).then(function (res) {\n                if (res.error) throw Error(res.error);\n              }));\n\n            case 21:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    return function registerUser(_x, _x2, _x3, _x4, _x5) {\n      return _registerUser.apply(this, arguments);\n    };\n  }(),\n  login: function login(username, password) {\n    var _this = this;\n\n    if (typeof username !== 'string') throw TypeError(\"\".concat(username, \" is not a string\"));\n    if (typeof password !== 'string') throw TypeError(\"\".concat(password, \" is not a string\"));\n    if (!username.trim()) throw Error('username is empty or blank');\n    if (!password.trim()) throw Error('password is empty or blank');\n    return fetch(\"\".concat(this.url, \"/auth\"), {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json; charset=utf-8'\n      },\n      body: JSON.stringify({\n        username: username,\n        password: password\n      })\n    }).then(function (res) {\n      return res.json();\n    }).then(function (res) {\n      if (res.error) throw Error(res.error);\n      var _res$data = res.data,\n          id = _res$data.id,\n          token = _res$data.token;\n      _this._userId = id;\n      _this._token = token;\n      sessionStorage.setItem('userId', id);\n      sessionStorage.setItem('token', token);\n    });\n  },\n\n  get loggedIn() {\n    return !!this._userId;\n  },\n\n  logout: function logout() {\n    this._userId = null;\n    this._token = null;\n    sessionStorage.removeItem('userId');\n    sessionStorage.removeItem('token');\n  },\n  retrieveUser: function retrieveUser(userId) {\n    return fetch(\"\".concat(this.url, \"/users/\").concat(userId), {\n      method: 'GET'\n    }).then(function (res) {\n      return res.json();\n    }).then(function (res) {\n      if (res.error) throw Error(res.error);\n      return res;\n    });\n  },\n  updateUser: function updateUser(userId, newName, newSurname, newPassword, password, newEmail) {\n    return fetch(\"\".concat(this.url, \"/users/\").concat(userId), {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json; charset=utf-8',\n        'Authorization': \"Bearer \".concat(this._token)\n      },\n      body: JSON.stringify({\n        newName: newName,\n        newSurname: newSurname,\n        newPassword: newPassword,\n        password: password,\n        newEmail: newEmail\n      })\n    }).then(function (res) {\n      return res.json();\n    }).then(function (res) {\n      if (res.error) throw Error(res.error);\n      return res;\n    });\n  },\n  getGameById: function getGameById(gameId) {\n    return fetch(\"\".concat(this.url, \"/games/\").concat(gameId), {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json; charset=utf-8'\n      }\n    }).then(function (res) {\n      return res.json();\n    }).then(function (res) {\n      if (res.error) throw Error(res.error);\n      return res;\n    });\n  },\n  addGameToOwnedGames: function addGameToOwnedGames(gameId) {\n    return fetch(\"\".concat(this.url, \"/users/\").concat(this._userId, \"/games/\").concat(gameId), {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json; charset=utf-8',\n        'Authorization': \"Bearer \".concat(this._token)\n      }\n    }).then(function (res) {\n      return res.json();\n    }).then(function (res) {\n      if (res.error) throw Error(res.error);\n      return res;\n    });\n  },\n  removeGameFromOwnedGames: function removeGameFromOwnedGames(gameId) {\n    return fetch(\"\".concat(this.url, \"/users/\").concat(this._userId, \"/games/\").concat(gameId), {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json; charset=utf-8',\n        'Authorization': \"Bearer \".concat(this._token)\n      }\n    }).then(function (res) {\n      return res.json();\n    }).then(function (res) {\n      if (res.error) throw Error(res.error);\n      return res;\n    });\n  },\n  getUserOwnedGames: function getUserOwnedGames(userId) {\n    return fetch(\"\".concat(this.url, \"/users/\").concat(userId, \"/games\"), {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json; charset=utf-8',\n        'Authorization': \"Bearer \".concat(this._token)\n      }\n    }).then(function (res) {\n      return res.json();\n    }).then(function (res) {\n      if (res.error) throw Error(res.error);\n      return res;\n    });\n  },\n  getAllGames: function getAllGames() {\n    return fetch(\"\".concat(this.url, \"/games\"), {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json; charset=utf-8'\n      }\n    }).then(function (res) {\n      return res.json();\n    }).then(function (res) {\n      if (res.error) throw Error(res.error);\n      return res;\n    });\n  },\n  getAllGamesWithPagination: function getAllGamesWithPagination(from, perPage) {\n    return fetch(\"\".concat(this.url, \"/games/\").concat(from, \"/\").concat(perPage), {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json; charset=utf-8'\n      }\n    }).then(function (res) {\n      return res.json();\n    }).then(function (res) {\n      if (res.error) throw Error(res.error);\n      return res;\n    });\n  },\n  getUserPlays: function getUserPlays(userId) {\n    return fetch(\"\".concat(this.url, \"/users/\").concat(userId, \"/plays\"), {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json; charset=utf-8',\n        'Authorization': \"Bearer \".concat(this._token)\n      }\n    }).then(function (res) {\n      return res.json();\n    }).then(function (res) {\n      if (res.error) throw Error(res.error);\n      return res.data;\n    });\n  },\n  registerPlay: function registerPlay(notes, date, players, gameId) {\n    return fetch(\"\".concat(this.url, \"/users/\").concat(this._userId, \"/plays\"), {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json; charset=utf-8',\n        'Authorization': \"Bearer \".concat(this._token)\n      },\n      body: JSON.stringify({\n        notes: notes,\n        date: date,\n        players: players,\n        gameId: gameId\n      })\n    }).then(function (res) {\n      return res.json();\n    }).then(function (res) {\n      if (res.error) throw Error(res.error);\n      return res;\n    });\n  },\n  deletePlay: function deletePlay(playId) {\n    return fetch(\"\".concat(this.url, \"/users/\").concat(this._userId, \"/plays/\").concat(playId), {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json; charset=utf-8',\n        'Authorization': \"Bearer \".concat(this._token)\n      }\n    }).then(function (res) {\n      return res.json();\n    }).then(function (res) {\n      if (res.error) throw Error(res.error);\n      return res;\n    });\n  },\n  getAllUsers: function getAllUsers() {\n    return fetch(\"\".concat(this.url, \"/users\"), {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json; charset=utf-8'\n      }\n    }).then(function (res) {\n      return res.json();\n    }).then(function (res) {\n      if (res.error) throw Error(res.error);\n      return res.data;\n    });\n  },\n\n  /**\n   * Add a project image\n   * @param {string} file \n   * @param {string} projectId \n   */\n  addPictureToPlay: function addPictureToPlay(file, playId) {\n    var picture = new FormData();\n    picture.append('picture', file);\n    return fetch(\"\".concat(this.url, \"/users/\").concat(this._userId, \"/plays/\").concat(playId, \"/pictures\"), {\n      method: 'POST',\n      headers: {\n        'Authorization': \"Bearer \".concat(this._token)\n      },\n      body: picture\n    }).then(function (res) {\n      return res.json();\n    });\n  }\n};\nexport default logic; // module.exports = logic","map":{"version":3,"sources":["/Users/fedegomez/bootcamp/collab/skylab-bootcamp-201809/staff/fede-gomez/project/client/src/logic.js"],"names":["logic","_userId","sessionStorage","getItem","_token","url","registerUser","name","surname","username","password","email","TypeError","trim","Error","fetch","method","headers","body","JSON","stringify","then","res","json","error","login","data","id","token","setItem","loggedIn","logout","removeItem","retrieveUser","userId","updateUser","newName","newSurname","newPassword","newEmail","getGameById","gameId","addGameToOwnedGames","removeGameFromOwnedGames","getUserOwnedGames","getAllGames","getAllGamesWithPagination","from","perPage","getUserPlays","registerPlay","notes","date","players","deletePlay","playId","getAllUsers","addPictureToPlay","file","picture","FormData","append"],"mappings":"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","sourcesContent":["const logic = {\n    _userId: sessionStorage.getItem('userId') || null,\n    _token: sessionStorage.getItem('token') || null,\n\n    url: 'NO-URL',\n\n    async registerUser(name, surname, username, password, email) {\n        if (typeof name !== 'string') throw TypeError(`${name} is not a string`)\n        if (typeof surname !== 'string') throw TypeError(`${surname} is not a string`)\n        if (typeof username !== 'string') throw TypeError(`${username} is not a string`)\n        if (typeof password !== 'string') throw TypeError(`${password} is not a string`)\n        if (typeof email !== 'string') throw TypeError(`${email} is not a string`)\n\n        if (!name.trim()) throw Error('name is empty or blank')\n        if (!surname.trim()) throw Error('surname is empty or blank')\n        if (!username.trim()) throw Error('username is empty or blank')\n        if (!password.trim()) throw Error('password is empty or blank')\n        if (!email.trim()) throw Error('email is empty or blank')\n\n        return fetch(`${this.url}/users`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json; charset=utf-8'\n            },\n            body: JSON.stringify({ name, surname, username, password, email })\n        })\n            .then(res => res.json())\n            .then(res => {\n                if (res.error) throw Error(res.error)\n            })\n    },\n\n    login(username, password) {\n        if (typeof username !== 'string') throw TypeError(`${username} is not a string`)\n        if (typeof password !== 'string') throw TypeError(`${password} is not a string`)\n\n        if (!username.trim()) throw Error('username is empty or blank')\n        if (!password.trim()) throw Error('password is empty or blank')\n\n        return fetch(`${this.url}/auth`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json; charset=utf-8'\n            },\n            body: JSON.stringify({ username, password })\n        })\n            .then(res => res.json())\n            .then(res => {\n                if (res.error) throw Error(res.error)\n\n                const { id, token } = res.data\n\n                this._userId = id\n                this._token = token\n\n                sessionStorage.setItem('userId', id)\n                sessionStorage.setItem('token', token)\n            })\n    },\n\n    get loggedIn() {\n        return !!this._userId\n    },\n\n    logout() {\n        this._userId = null\n        this._token = null\n\n        sessionStorage.removeItem('userId')\n        sessionStorage.removeItem('token')\n    },\n\n    retrieveUser(userId) {\n        return fetch(`${this.url}/users/${userId}`, {\n            method: 'GET'\n        })\n            .then(res => res.json())\n            .then(res => {\n                if (res.error) throw Error(res.error)\n                return res\n            })\n    },\n\n    updateUser(userId, newName, newSurname, newPassword, password, newEmail) {\n        return fetch(`${this.url}/users/${userId}`, {\n            method: 'PATCH',\n            headers: {\n                'Content-Type': 'application/json; charset=utf-8',\n                'Authorization': `Bearer ${this._token}`\n            },\n            body: JSON.stringify({ newName, newSurname, newPassword, password, newEmail })\n        })\n            .then(res => res.json())\n            .then(res => {\n                if (res.error) throw Error(res.error)\n                return res\n            })\n    },\n\n    getGameById(gameId) {\n        return fetch(`${this.url}/games/${gameId}`, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json; charset=utf-8'\n            }\n        })\n            .then(res => res.json())\n            .then(res => {\n                if (res.error) throw Error(res.error)\n                return res\n            })\n    },\n\n    addGameToOwnedGames(gameId) {\n\n        return fetch(`${this.url}/users/${this._userId}/games/${gameId}`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json; charset=utf-8',\n                'Authorization': `Bearer ${this._token}`\n            }\n        })\n            .then(res => res.json())\n            .then(res => {\n                if (res.error) throw Error(res.error)\n                return res\n            })\n    },\n\n    removeGameFromOwnedGames(gameId) {\n        return fetch(`${this.url}/users/${this._userId}/games/${gameId}`, {\n            method: 'DELETE',\n            headers: {\n                'Content-Type': 'application/json; charset=utf-8',\n                'Authorization': `Bearer ${this._token}`\n            }\n        })\n            .then(res => res.json())\n            .then(res => {\n                if (res.error) throw Error(res.error)\n                return res\n            })\n    },\n\n    getUserOwnedGames(userId) {\n        return fetch(`${this.url}/users/${userId}/games`, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json; charset=utf-8',\n                'Authorization': `Bearer ${this._token}`\n            }\n        })\n            .then(res => res.json())\n            .then(res => {\n                if (res.error) throw Error(res.error)\n                return res\n            })\n    },\n\n    getAllGames() {\n\n        return fetch(`${this.url}/games`, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json; charset=utf-8'\n            }\n        })\n            .then(res => res.json())\n            .then(res => {\n\n                if (res.error) throw Error(res.error)\n                return res\n            })\n    },\n\n    getAllGamesWithPagination(from, perPage) {\n\n        return fetch(`${this.url}/games/${from}/${perPage}`, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json; charset=utf-8'\n            }\n        })\n            .then(res => res.json())\n            .then(res => {\n                if (res.error) throw Error(res.error)\n                return res\n            })\n    },\n\n    getUserPlays(userId) {\n        return fetch(`${this.url}/users/${userId}/plays`, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json; charset=utf-8',\n                'Authorization': `Bearer ${this._token}`\n            }\n        })\n            .then(res => res.json())\n            .then(res => {\n                if (res.error) throw Error(res.error)\n                return res.data\n            })\n    },\n\n    registerPlay(notes, date, players, gameId) {\n\n        return fetch(`${this.url}/users/${this._userId}/plays`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json; charset=utf-8',\n                'Authorization': `Bearer ${this._token}`\n            },\n            body: JSON.stringify({ notes, date, players, gameId })\n        })\n            .then(res => res.json())\n            .then(res => {\n                if (res.error) throw Error(res.error)\n                return res\n            })\n    },\n\n    deletePlay(playId) {\n        return fetch(`${this.url}/users/${this._userId}/plays/${playId}`, {\n            method: 'DELETE',\n            headers: {\n                'Content-Type': 'application/json; charset=utf-8',\n                'Authorization': `Bearer ${this._token}`\n            }\n        })\n            .then(res => res.json())\n            .then(res => {\n                if (res.error) throw Error(res.error)\n                return res\n            })\n    },\n\n    getAllUsers() {\n\n        return fetch(`${this.url}/users`, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json; charset=utf-8'\n            }\n        })\n            .then(res => res.json())\n            .then(res => {\n\n                if (res.error) throw Error(res.error)\n                return res.data\n            })\n    },\n\n    /**\n     * Add a project image\n     * @param {string} file \n     * @param {string} projectId \n     */\n    addPictureToPlay(file, playId) {\n        let picture = new FormData()\n\n        picture.append('picture', file)\n        return fetch(`${this.url}/users/${this._userId}/plays/${playId}/pictures`, {\n            method: 'POST',\n            headers: {\n                'Authorization': `Bearer ${this._token}`\n            },\n            body: picture\n        })\n            .then(res => res.json())\n    }\n}\n\nexport default logic\n// module.exports = logic"]},"metadata":{},"sourceType":"module"}