{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nvar react_1 = tslib_1.__importDefault(require(\"react\"));\n\nvar TransitionGroup_1 = tslib_1.__importDefault(require(\"./TransitionGroup/TransitionGroup\"));\n\nvar SlideDownContent = function (_super) {\n  tslib_1.__extends(SlideDownContent, _super);\n\n  function SlideDownContent(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.handleTransitionEnd = function (evt) {\n      if (evt.target === _this.outerRef.current && evt.propertyName === 'height') {\n        var callback = _this.callbacks.shift();\n\n        callback && callback();\n\n        if (_this.callbacks.length === 0) {\n          _this.outerRef.current.classList.remove('transitioning');\n\n          _this.outerRef.current.style.transitionProperty = 'none';\n          _this.outerRef.current.style.height = _this.props.closed ? '0px' : 'auto';\n\n          if (_this.props.closed) {\n            _this.outerRef.current.classList.add('closed');\n          }\n        }\n      }\n    };\n\n    _this.outerRef = props.forwardedRef || react_1.default.createRef();\n    _this.callbacks = [];\n    return _this;\n  }\n\n  SlideDownContent.prototype.componentDidMount = function () {\n    if (this.props.closed) {\n      this.outerRef.current.classList.add('closed');\n    }\n  };\n\n  SlideDownContent.prototype.componentWillAppear = function (callback) {\n    if (this.props.transitionOnAppear) {\n      this.callbacks.push(callback);\n      this.startTransition('0px');\n    } else {\n      this.outerRef.current.style.height = this.props.closed ? '0px' : 'auto';\n      callback();\n    }\n  };\n\n  SlideDownContent.prototype.componentWillEnter = function (callback) {\n    this.callbacks.push(callback);\n    var prevHeight = this.outerRef.current.getBoundingClientRect().height + 'px';\n    this.startTransition(prevHeight);\n  };\n\n  SlideDownContent.prototype.componentWillLeave = function (callback) {\n    this.callbacks.push(callback);\n    this.outerRef.current.classList.add('transitioning');\n    this.outerRef.current.style.height = getComputedStyle(this.outerRef.current).height;\n    this.outerRef.current.offsetHeight;\n    this.outerRef.current.style.transitionProperty = 'height';\n    this.outerRef.current.style.height = '0px';\n  };\n\n  SlideDownContent.prototype.getSnapshotBeforeUpdate = function () {\n    if (this.callbacks.length === 0) {\n      return this.outerRef.current.getBoundingClientRect().height + 'px';\n    } else {\n      return null;\n    }\n  };\n\n  SlideDownContent.prototype.componentDidUpdate = function (_prevProps, _prevState, snapshot) {\n    var callback = this.callbacks.shift();\n    callback && callback();\n\n    if (this.callbacks.length === 0) {\n      var prevHeight = snapshot || getComputedStyle(this.outerRef.current).height;\n      this.startTransition(prevHeight);\n    }\n  };\n\n  SlideDownContent.prototype.startTransition = function (prevHeight) {\n    var endHeight = '0px';\n\n    if (!this.props.closed) {\n      this.outerRef.current.classList.remove('closed');\n      this.outerRef.current.style.height = 'auto';\n      endHeight = getComputedStyle(this.outerRef.current).height;\n    }\n\n    if (parseFloat(endHeight).toFixed(2) !== parseFloat(prevHeight).toFixed(2)) {\n      this.outerRef.current.classList.add('transitioning');\n      this.outerRef.current.style.height = prevHeight;\n      this.outerRef.current.offsetHeight;\n      this.outerRef.current.style.transitionProperty = 'height';\n      this.outerRef.current.style.height = endHeight;\n    }\n  };\n\n  SlideDownContent.prototype.render = function () {\n    var className = this.props.className ? 'react-slidedown ' + this.props.className : 'react-slidedown';\n    return react_1.default.createElement(\"div\", {\n      className: className,\n      ref: this.outerRef,\n      onTransitionEnd: this.handleTransitionEnd\n    }, this.props.children);\n  };\n\n  SlideDownContent.defaultProps = {\n    transitionOnAppear: true,\n    closed: false\n  };\n  return SlideDownContent;\n}(react_1.default.Component);\n\nfunction TransitionGroupWrapper(props) {\n  var childrenArray = react_1.default.Children.toArray(props.children);\n  return childrenArray[0] || null;\n}\n\nvar SlideDownComponent = function SlideDownComponent(props) {\n  var children = props.children,\n      attrs = tslib_1.__rest(props, [\"children\"]);\n\n  var hasContent = children && react_1.default.Children.count(children) !== 0;\n  return react_1.default.createElement(TransitionGroup_1.default, {\n    component: TransitionGroupWrapper\n  }, hasContent && react_1.default.createElement(SlideDownContent, tslib_1.__assign({\n    key: 'content'\n  }, attrs), children));\n};\n\nexports.SlideDown = react_1.default.forwardRef(function (props, ref) {\n  return react_1.default.createElement(SlideDownComponent, tslib_1.__assign({}, props, {\n    forwardedRef: ref\n  }));\n});\nexports.default = exports.SlideDown;","map":null,"metadata":{},"sourceType":"script"}